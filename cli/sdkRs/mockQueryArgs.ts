import { concat, encodeAbiParameters, parseAbiParameters, zeroHash } from 'viem';
import { redirectConsole } from '../utils';

export const mockQueryArgs = async (
  sourceChainId: string,
  computeResults: string,
  querySchema: string,
  callbackTarget: string,
  callbackExtraData: string,
  maxFeePerGas: string,
  callbackGasLimit: string,
  overrideAxiomQueryFee: string,
  refundee: string,
) => {
  const { restoreConsole, getCaptures } = redirectConsole();

  try {
    let computeQuery = {
      k: 13,
      vkey: [
        "0x0001000009000100000004010000010080000000000000000000000000000000",
        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef",
        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef",
        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef",
        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef",
        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef",
        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef",
        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef",
        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef",
        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef",
        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef",
        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef",
        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef",
        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef",
        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef",
        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
      ],
      computeProof: "",
      resultLen: 0,
    };

    const parsedComputeResults = JSON.parse(computeResults.replace(/\\n/g, '').trim());
    computeQuery.resultLen = parsedComputeResults.length;
    
    const computeAccumulator = concat([zeroHash, zeroHash]);
    const computeProofBytes = "0x
    const computeProof = concat([computeAccumulator, ...parsedComputeResults, computeProofBytes]);
    computeQuery.computeProof = computeProof.toString();

    const callback = {
      target: callbackTarget,
      extraData: callbackExtraData,
    };

    const feeData = {
      maxFeePerGas,
      callbackGasLimit,
      overrideAxiomQueryFee,
    };

    const queryArgs = {
      args: {
        sourceChainId,
        dataQueryHash: zeroHash as string,
        computeQuery,
        callback,
        feeData,
        userSalt: zeroHash as string,
        refundee,
        dataQuery: "0x00",
      },
      querySchema,
      queryId: zeroHash as string,
      computeResults: parsedComputeResults,
      value: "50000000000000000",
    };
    console.log(queryArgs);

    const logs = getCaptures();
    const output = encodeAbiParameters(parseAbiParameters('string x, string y, string z'), [logs.logs, logs.errors, JSON.stringify(queryArgs)])
    restoreConsole();
    console.log(output);
  } catch (e) {
    console.error(e);
    const logs = getCaptures();
    const output = encodeAbiParameters(parseAbiParameters('string x, string y, string z'), [logs.logs, logs.errors, ""])
    restoreConsole();
    console.log(output);
  }
};
